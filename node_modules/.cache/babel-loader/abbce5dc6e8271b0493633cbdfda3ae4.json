{"ast":null,"code":"import _slicedToArray from \"D:\\\\Lumiere\\\\Project\\\\marketing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Lumiere\\\\Project\\\\marketing\\\\src\\\\components\\\\simpleModal.tsx\";\n// Generic customised Modal pattern\n// Author: Nga Vu\nimport { Box, Button, Dialog, DialogContent, IconButton } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport React from 'react';\n\nconst SingleModal = props => {\n  const buttonTitle = props.buttonTitle,\n        modalTitle = props.modalTitle,\n        buttonStartIcon = props.buttonStartIcon,\n        small = props.small,\n        variant = props.variant,\n        color = props.color,\n        backgroundColor = props.backgroundColor;\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, buttonTitle && /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClickOpen,\n    startIcon: buttonStartIcon || '',\n    size: small ? 'small' : 'medium',\n    style: {\n      color: \"\".concat(color),\n      backgroundColor: \"\".concat(backgroundColor)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, buttonTitle), !buttonTitle && buttonStartIcon && /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  }, buttonStartIcon), /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    p: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  })))), /*#__PURE__*/React.createElement(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, props.children)));\n};\n\nexport default SingleModal;","map":{"version":3,"sources":["D:/Lumiere/Project/marketing/src/components/simpleModal.tsx"],"names":["Box","Button","Dialog","DialogContent","IconButton","CloseIcon","React","SingleModal","props","buttonTitle","modalTitle","buttonStartIcon","small","variant","color","backgroundColor","useState","open","setOpen","handleClickOpen","handleClose","children"],"mappings":";;AAAA;AACA;AACA,SACEA,GADF,EACOC,MADP,EACeC,MADf,EACuBC,aADvB,EACmDC,UADnD,QAEO,mBAFP;AAGA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAeA,MAAMC,WAAuC,GAAIC,KAAD,IAAW;AAAA,QAEvDC,WAFuD,GAGrDD,KAHqD,CAEvDC,WAFuD;AAAA,QAE1CC,UAF0C,GAGrDF,KAHqD,CAE1CE,UAF0C;AAAA,QAE9BC,eAF8B,GAGrDH,KAHqD,CAE9BG,eAF8B;AAAA,QAEbC,KAFa,GAGrDJ,KAHqD,CAEbI,KAFa;AAAA,QAENC,OAFM,GAGrDL,KAHqD,CAENK,OAFM;AAAA,QAEGC,KAFH,GAGrDN,KAHqD,CAEGM,KAFH;AAAA,QAEUC,eAFV,GAGrDP,KAHqD,CAEUO,eAFV;;AAAA,0BAIjCT,KAAK,CAACU,QAAN,CAAe,KAAf,CAJiC;AAAA;AAAA,QAIlDC,IAJkD;AAAA,QAI5CC,OAJ4C;;AAKzD,QAAMC,eAAe,GAAG,MAAM;AAC5BD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;;AAGA,QAAME,WAAW,GAAG,MAAM;AACxBF,IAAAA,OAAO,CAAC,KAAD,CAAP;AACD,GAFD;;AAGA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIT,WAAW,iBAET,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEU,eADX;AAEE,IAAA,SAAS,EAAER,eAAe,IAAI,EAFhC;AAGE,IAAA,IAAI,EAAEC,KAAK,GAAG,OAAH,GAAa,QAH1B;AAIE,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,YAAKA,KAAL,CAAP;AAAqBC,MAAAA,eAAe,YAAKA,eAAL;AAApC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKEN,WALF,CAJN,EAcK,CAACA,WAAD,IAAgBE,eAAjB,iBACG,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEQ,eAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCR,eAAvC,CAfP,eAiBE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAES,WAAjB;AAA8B,IAAA,IAAI,EAAEH,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,GAAD;AAAK,IAAA,CAAC,EAAE,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEG,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CANF,CADF,eAaE,oBAAC,aAAD;AAAe,IAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,KAAK,CAACa,QADT,CAbF,CAjBF,CADF;AAqCD,CAhDD;;AAkDA,eAAed,WAAf","sourcesContent":["// Generic customised Modal pattern\r\n// Author: Nga Vu\r\nimport {\r\n  Box, Button, Dialog, DialogContent, DialogTitle, IconButton,\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport React from 'react';\r\n\r\ninterface SingleModalProps {\r\n  // Label text for toggled button (optional)\r\n  buttonTitle?: any;\r\n  // Icon for toggled button (optional)\r\n  buttonStartIcon?: any;\r\n  // Title for content in the modal (required)\r\n  modalTitle: string;\r\n  // The following props are used to adjust style of toggled button\r\n  small?: boolean;\r\n  variant?: 'outlined' | 'text' | 'contained';\r\n  color?: string;\r\n  backgroundColor?: string;\r\n}\r\nconst SingleModal: React.FC<SingleModalProps> = (props) => {\r\n  const {\r\n    buttonTitle, modalTitle, buttonStartIcon, small, variant, color, backgroundColor,\r\n  } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        buttonTitle\r\n        && (\r\n          <Button\r\n            onClick={handleClickOpen}\r\n            startIcon={buttonStartIcon || ''}\r\n            size={small ? 'small' : 'medium'}\r\n            style={{ color: `${color}`, backgroundColor: `${backgroundColor}` }}\r\n          >{buttonTitle}\r\n          </Button>\r\n        )\r\n      }\r\n      {\r\n        (!buttonTitle && buttonStartIcon)\r\n        && <IconButton onClick={handleClickOpen}>{buttonStartIcon}</IconButton>\r\n      }\r\n      <Dialog onClose={handleClose} open={open}>\r\n        <Box display=\"flex\">\r\n          {/* <Box flexGrow={1}>\r\n            <DialogTitle>\r\n              {modalTitle}\r\n            </DialogTitle>\r\n          </Box> */}\r\n          <Box p={1}>\r\n            <IconButton onClick={handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n        <DialogContent dividers>\r\n          {props.children}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SingleModal;\r\n"]},"metadata":{},"sourceType":"module"}